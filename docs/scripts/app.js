/******/!function(e){function t(o){if(n[o])return n[o].exports;var l=n[o]={exports:{},id:o,loaded:!1};return e[o].call(l.exports,l,l.exports,t),l.loaded=!0,l.exports}// webpackBootstrap
/******/
var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}n(1);var l=n(4),s=o(l),i=n(6),d=o(i);angular.module("AngularjsDropdownMultiselectExample",["angularjs-dropdown-multiselect","hljs","ui.bootstrap","ui.router"]).component("main",(0,s["default"])()).component("v1Docs",(0,d["default"])()).config(["$stateProvider","$urlRouterProvider",function(e,t){e.state({name:"main",url:"/main",template:"<main></main>"}),e.state({name:"v1",url:"/v1",template:"<v1-docs></v1-docs>"}),t.otherwise("/main")}])},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}var l=n(2),s=o(l);angular.module("angularjs-dropdown-multiselect",[]).directive("dmDropdownStaticInclude",["$compile",function(e){"ngInject";return function(t,n,o){var l=o.dmDropdownStaticInclude,s=n.html(l).contents();e(s)(t)}}]).directive("ngDropdownMultiselect",s["default"]).filter("alreadySelectedFilter",function(){return function(e,t){for(var n=[],o=0;o<e.length;o++){var l=e[o];0===t.filter(function(e){return e.id==l.id}).length&&n.push(l)}return n}})},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function l(){return{restrict:"AE",scope:{selectedModel:"=",options:"=",extraSettings:"=",events:"=",searchFilter:"=?",translationTexts:"=",disabled:"=",onSearch:"&",asyncOptions:"=",loaderClass:"=",isLoading:"="},transclude:{toggleDropdown:"?toggleDropdown"},controller:i["default"],templateUrl:"app/component/angularjs-dropdown-multiselect.html"}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=l;var s=n(3),i=o(s)},function(e,t){"use strict";function n(e,t){var n=!1;return e.some(function(e){return e===t?(n=!0,!0):!1}),n}function o(e,t,n){var o=-1;return e.some(function(e,l){return e[n]===t[n]?(o=l,!0):!1}),o}function l(e,t,l,s){"ngInject";function i(){setTimeout(function(){var e=angular.element(t)[0].querySelector(".option");angular.isDefined(e)&&null!=e&&e.focus()},0)}function d(){e.open?e.close():e.open=!0,e.settings.keyboardControls&&e.open&&(1===e.settings.selectionLimit&&e.settings.enableSearch?setTimeout(function(){angular.element(t)[0].querySelector(".searchField").focus()},0):i()),e.settings.enableSearch&&e.open&&setTimeout(function(){angular.element(t)[0].querySelector(".searchField").focus()},0)}function r(t,n){e.setSelectedItem(n,!1,!0),t.stopImmediatePropagation()}function a(){e.open=!1,e.input.searchFilter=e.settings.clearSearchOnClose?"":e.input.searchFilter,e.externalEvents.onClose()}function c(t){e.selectedModel.splice(0,e.selectedModel.length),e.options.forEach(function(n){n[e.settings.groupBy]===t&&e.setSelectedItem(n,!1,!1)}),e.externalEvents.onSelectionChanged()}function u(t){return null!==e.settings.groupByTextProvider?e.settings.groupByTextProvider(t):t}function h(e){var n=t.find("button"),o=document.createElement("canvas"),l=o.getContext("2d");return l.font=n.css("font-size")+n.css("font-family"),l.originalFont=n.css("font-size")+n.css("font-family"),l.fillStyle="#000000",l.measureText(e).width}function g(){if(e.settings.dynamicTitle&&e.selectedModel&&e.selectedModel.length>0){if(angular.isFunction(e.settings.smartButtonTextProvider))return e.settings.smartButtonTextProvider(e.selectedModel);if(e.settings.smartButtonMaxItems>0){var n=24,o=2,l=8,s=t[0].offsetWidth-n-o-l,i=[];angular.forEach(e.options,function(t){if(e.isChecked(t)){var n=e.getPropertyForObject(t,e.settings.displayProp),o=e.settings.smartButtonTextConverter(n,t);i.push(o||n)}}),e.selectedModel.length>e.settings.smartButtonMaxItems&&(i=i.slice(0,e.settings.smartButtonMaxItems),i.push("..."));var d=i.join(", "),r=d.length-4;if(0===t[0].offsetWidth)return d;if(s<=h("..."))return"...";for(;h(d)>s;)"..."!==i[i.length-1]&&(i.push("..."),d+="...",r=d.length-4),d=d.slice(0,r)+d.slice(r+1),r-=1;return d}var a=angular.isDefined(e.selectedModel)?e.selectedModel.length:0;return 0===a?e.texts.buttonDefaultText:e.settings.showAllSelectedText&&a===e.options.length?e.texts.allSelectedText:a+" "+e.texts.dynamicButtonTextSuffix}return e.texts.buttonDefaultText}function p(e,t){return angular.isDefined(e)&&Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0}function f(){e.deselectAll(!0),e.externalEvents.onSelectAll();var t=l("filter")(e.options,e.getFilter(e.input.searchFilter));angular.forEach(t,function(t){e.setSelectedItem(t,!0,!1)}),e.externalEvents.onSelectionChanged(),e.selectedGroup=null}function m(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:!1;t||e.externalEvents.onDeselectAll(),e.selectedModel.splice(0,e.selectedModel.length),t||e.externalEvents.onSelectionChanged(),e.selectedGroup=null}function b(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:!1,l=arguments[2];console.log("set selected item");var s=void 0,i=void 0;if(s=-1!==e.selectedModel.indexOf(t),i=e.selectedModel.indexOf(t),s){console.log("exists");var d=e.asyncSelected;d=d.filter(function(e){return e!==t}),e.asyncSelected=d,e.options.push(t)}else{console.log("doesn't exist"),e.asyncSelected.push(t);var r=e.options;r=r.filter(function(e){return e!==t}),e.options=r}console.log("selected",t),angular.isDefined(A.idProperty)?(s=-1!==o(e.selectedModel,t,A.idProperty),i=o(e.selectedModel,t,A.idProperty)):(s=-1!==e.selectedModel.indexOf(t),i=e.selectedModel.indexOf(t)),!n&&s?(e.selectedModel.splice(i,1),e.externalEvents.onItemDeselect(t),e.settings.closeOnDeselect&&e.close()):!s&&(0===e.settings.selectionLimit||e.selectedModel.length<e.settings.selectionLimit)?(e.selectedModel.push(t),l&&e.externalEvents.onItemSelect(t),e.settings.closeOnSelect&&e.close(),e.settings.selectionLimit>0&&e.selectedModel.length===e.settings.selectionLimit&&e.externalEvents.onMaxSelectionReached()):1!==e.settings.selectionLimit||s||e.selectedModel.length!==e.settings.selectionLimit||(e.selectedModel.splice(0,1),e.selectedModel.push(t),l&&e.externalEvents.onItemSelect(t),e.settings.closeOnSelect&&e.close()),l&&e.externalEvents.onSelectionChanged(),e.selectedGroup=null}function y(t){return angular.isDefined(A.idProperty)?-1!==o(e.selectedModel,t,A.idProperty):-1!==e.selectedModel.indexOf(t)}function v(t){var n=angular.element(t.target).scope(),o=void 0,l=t.target.parentNode;if(e.settings.keyboardControls)if(13===t.keyCode||32===t.keyCode)t.preventDefault(),n.option?e.setSelectedItem(n.option,!1,!0):"deselectAll"===t.target.id?e.deselectAll():"selectAll"===t.target.id&&e.selectAll();else if(38===t.keyCode){for(t.preventDefault(),l.previousElementSibling&&(o=l.previousElementSibling.querySelector("a")||l.previousElementSibling.querySelector("input"));!o&&l;)l=l.previousElementSibling,l&&(o=l.querySelector("a")||l.querySelector("input"));o&&o.focus()}else if(40===t.keyCode){for(t.preventDefault(),l.nextElementSibling&&(o=l.nextElementSibling.querySelector("a")||l.nextElementSibling.querySelector("input"));!o&&l;)l=l.nextElementSibling,l&&(o=l.querySelector("a")||l.querySelector("input"));o&&o.focus()}else 27===t.keyCode&&(t.preventDefault(),e.toggleDropdown())}function x(t){var n=t.target.parentNode.parentNode,o=void 0;if(e.settings.keyboardControls)if(9===t.keyCode||40===t.keyCode)t.preventDefault(),i();else if(38===t.keyCode){for(t.preventDefault(),n.previousElementSibling&&(o=n.previousElementSibling.querySelector("a")||n.previousElementSibling.querySelector("input"));!o&&n;)n=n.previousElementSibling,n&&(o=n.querySelector("a")||n.querySelector("input"));o&&o.focus()}else 27===t.keyCode&&(t.preventDefault(),e.toggleDropdown())}function w(t,n){var o=void 0;e.settings.keyboardControls&&13===t.keyCode&&(1===e.settings.selectionLimit&&e.settings.enableSearch?(o=l("filter")(e.options,e.getFilter(n)),1===o.length&&e.setSelectedItem(o[0],!1,!0)):e.settings.enableSearch&&e.selectAll())}function k(t){var n={};return n[e.settings.searchField]=t,n}function S(t){t&&t.stopPropagation(),e.settings.enableSearch=!e.settings.enableSearch,e.settings.enableSearch||(e.input.searchFilter="")}function C(){e.settings.keyboardControls&&13===event.keyCode&&(e.toggleSearch(),e.settings.enableSearch?setTimeout(function(){angular.element(t)[0].querySelector(".searchField").focus()},0):i())}function T(t,n){if(angular.isUndefined(n))return-1;if(angular.isUndefined(t))return 1;if("object"!==t.type||"object"!==n.type)return t.index<n.index?-1:1;var o=t.value,l=n.value;return e.settings.groupBy&&o[e.settings.groupBy]!==l[e.settings.groupBy]?o[e.settings.groupBy]<l[e.settings.groupBy]?1:-1:e.settings.selectedToTop?!e.isChecked(o)&&!e.isChecked(l)||e.isChecked(o)&&e.isChecked(l)?e.options.indexOf(o)<e.options.indexOf(l)?-1:1:e.isChecked(o)?-1:1:e.options.indexOf(o)<e.options.indexOf(l)?-1:1}var B=t.children()[0],D={onItemSelect:angular.noop,onItemDeselect:angular.noop,onSelectAll:angular.noop,onDeselectAll:angular.noop,onInitDone:angular.noop,onMaxSelectionReached:angular.noop,onSelectionChanged:angular.noop,onClose:angular.noop},A={dynamicTitle:!0,scrollable:!1,scrollableHeight:"300px",closeOnBlur:!0,displayProp:"label",enableSearch:!1,clearSearchOnClose:!1,selectionLimit:0,showCheckAll:!0,showUncheckAll:!0,showEnableSearchButton:!1,closeOnSelect:!1,buttonClasses:"btn btn-default",closeOnDeselect:!1,groupBy:void 0,checkBoxes:!1,groupByTextProvider:null,smartButtonMaxItems:0,smartButtonTextConverter:angular.noop,styleActive:!1,selectedToTop:!1,keyboardControls:!1,template:"{{getPropertyForObject(option, settings.displayProp)}}",searchField:"$",showAllSelectedText:!1},M={checkAll:"Check All",uncheckAll:"Uncheck All",selectionCount:"checked",selectionOf:"/",searchPlaceholder:"Search...",buttonDefaultText:"Select",dynamicButtonTextSuffix:"checked",disableSearch:"Disable search",enableSearch:"Enable search",selectGroup:"Select all:",allSelectedText:"All"},I={searchFilter:e.searchFilter||""};angular.extend(A,e.extraSettings||[]),angular.extend(D,e.events||[]),angular.extend(M,e.translationTexts),A.closeOnBlur&&s.on("click",function(t){if(e.open){for(var o=t.target.parentElement,l=!1;angular.isDefined(o)&&null!==o&&!l;)o.className.split&&n(o.className.split(" "),"multiselect-parent")&&!l&&o===B&&(l=!0),o=o.parentElement;l||e.$apply(function(){e.close()})}}),angular.extend(e,{toggleDropdown:d,checkboxClick:r,externalEvents:D,settings:A,texts:M,input:I,close:a,selectCurrentGroup:c,getGroupLabel:u,getButtonText:g,getPropertyForObject:p,selectAll:f,deselectAll:m,setSelectedItem:b,isChecked:y,keyDownLink:v,keyDownSearchDefault:x,keyDownSearch:w,getFilter:k,toggleSearch:S,keyDownToggleSearch:C,orderFunction:T}),e.externalEvents.onInitDone(),e.asyncSelected=[]}l.$inject=["$scope","$element","$filter","$document"],Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=l},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function l(){var e={templateUrl:"app/main/main.template.html",controller:i["default"]};return e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=l;var s=n(5),i=o(s)},function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function l(e,t,o){"ngInject";n(this,l),e.testing=!0,e.testmodel=[{id:1}],e.testdata=[{id:1,label:"David"},{id:2,label:"Jhon"},{id:3,label:"Danny"}],e.testsettings={selectionLimit:1,selectedToTop:!0,idProperty:"id"},e.testevents={onSelectionChanged:function(){t.debug("you changed selection")}},e.data={},e.isLoading=!1,e.search=function(t){console.log("%c Searching with "+t,"background: green; color: white; display: block;"),e.isLoading=!0,o.get("https://api.myjson.com/bins/hl32x").then(function(t){e.isLoading=!1,e.data=t.data})},e.model=[],e.data=[],e.settings={enableSearch:!0,showCheckAll:!1,showUncheckAll:!1,selectedToTop:!0,closeOnBlur:!1}};o.$inject=["$scope","$log","$http"],t["default"]=o},function(e,t){"use strict";function n(){var e={templateUrl:"app/v1docs/v1docs.template.html"};return e}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n}]),angular.module("AngularjsDropdownMultiselectExample").run(["$templateCache",function(e){e.put("app/component/angularjs-dropdown-multiselect.html",'<div class="multiselect-parent btn-group dropdown-multiselect" ng-class="{open: open}"><div ng-transclude=toggleDropdown ng-click=toggleDropdown()><button ng-disabled=disabled type=button class=dropdown-toggle ng-class=settings.buttonClasses>{{getButtonText()}}&nbsp;<span class=caret></span></button></div><ul class="dropdown-menu dropdown-menu-form" ng-if=open ng-style="{display: open ? \'block\' : \'none\', height : settings.scrollable ? settings.scrollableHeight : \'auto\', overflow: \'auto\' }"><li ng-if="settings.showCheckAll && settings.selectionLimit === 0"><a ng-keydown=keyDownLink($event) data-ng-click=selectAll() tabindex=-1 id=selectAll><span class="glyphicon glyphicon-ok"></span> {{texts.checkAll}}</a></li><li ng-if=settings.showUncheckAll><a ng-keydown=keyDownLink($event) data-ng-click=deselectAll(); tabindex=-1 id=deselectAll><span class="glyphicon glyphicon-remove"></span> {{texts.uncheckAll}}</a></li><li ng-if="settings.selectByGroups && ((settings.showCheckAll && settings.selectionLimit > 0) || settings.showUncheckAll)" class=divider></li><li ng-repeat="currentGroup in settings.selectByGroups track by $index" ng-click=selectCurrentGroup(currentGroup)><a ng-class="{\'dropdown-selected-group\': selectedGroup === currentGroup}" tabindex=-1>{{::texts.selectGroup}} {{::getGroupLabel(currentGroup)}}</a></li><li ng-if="settings.selectByGroups && settings.showEnableSearchButton" class=divider></li><li ng-if="settings.showEnableSearchButton && settings.enableSearch"><a ng-keydown="keyDownLink($event); keyDownToggleSearch();" ng-click=toggleSearch($event); tabindex=-1>{{texts.disableSearch}}</a></li><li ng-if="settings.showEnableSearchButton && !settings.enableSearch"><a ng-keydown="keyDownLink($event); keyDownToggleSearch();" ng-click=toggleSearch($event); tabindex=-1>{{texts.enableSearch}}</a></li><li ng-if="(settings.showCheckAll && settings.selectionLimit > 0) || settings.showUncheckAll || settings.showEnableSearchButton" class=divider></li><li ng-if=settings.enableSearch><div class=dropdown-header><input type=text class="form-control searchField" ng-keydown="keyDownSearchDefault($event); keyDownSearch($event, input.searchFilter);" , ng-keyup="onSearch({term: input.searchFilter})" , ng-style="{width: \'100%\'}" ng-model=input.searchFilter placeholder={{texts.searchPlaceholder}}></div></li><li ng-if=settings.enableSearch class=divider></li><!--// loader--><li ng-show=isLoading class=text-center><i class="{{ loaderClass }} searchLoader"></i></li><!--// async search options--><li ng-repeat="option in asyncSelected"><a ng-click="option.disabled || setSelectedItem(option, false, true)"><span class="glyphicon glyphicon-ok"></span> {{ ::option.label }}</a></li><li ng-if=settings.groupBy ng-repeat-start="option in orderedItems = ( options | filter:getFilter(input.searchFilter)| orderBy:\'\':false:orderFunction)" ng-show="getPropertyForObject(option, settings.groupBy) !== getPropertyForObject(orderedItems[$index - 1], settings.groupBy)" role=presentation class=dropdown-header>{{ getGroupLabel(getPropertyForObject(option, settings.groupBy)) }}</li><li ng-if=settings.groupBy ng-class="{\'active\': isChecked(option) && settings.styleActive}" ng-repeat-end role=presentation><a ng-keydown="option.disabled || keyDownLink($event)" role=menuitem class=option tabindex=-1 ng-click="option.disabled || setSelectedItem(option, false, true)" ng-disabled=option.disabled><div ng-if=settings.checkBoxes class=checkbox><label><input class=checkboxInput type=checkbox ng-click="checkboxClick($event, option)" ng-checked=isChecked(option)> <span dm-dropdown-static-include="{{ settings.template }}"></span></label></div><span ng-if=!settings.checkBoxes data-ng-class="{\'glyphicon glyphicon-ok\': isChecked(option)}"></span> <span dm-dropdown-static-include="{{ settings.template }}"></span></a></li><li ng-if=!settings.groupBy ng-class="{\'active\': isChecked(option) && settings.styleActive}" role=presentation ng-repeat="option in options | alreadySelectedFilter:selectedModel | orderBy:\'\':false:orderFunction"><a ng-keydown="option.disabled || keyDownLink($event)" role=menuitem class=option tabindex=-1 ng-click="option.disabled || setSelectedItem(option, false, true)" ng-disabled=option.disabled><div ng-if=settings.checkBoxes class=checkbox><label><input class=checkboxInput type=checkbox ng-click="checkboxClick($event, option)" ng-checked=isChecked(option)> <span dm-dropdown-static-include="{{ settings.template }}"></span></label></div><span ng-if=!settings.checkBoxes data-ng-class="{\'glyphicon glyphicon-ok\': isChecked(option)}"></span> <span ng-if=!settings.checkBoxes dm-dropdown-static-include="{{ settings.template }}"></span></a></li><li class=divider ng-show="settings.selectionLimit > 1"></li><li role=presentation ng-show="settings.selectionLimit > 1"><a role=menuitem>{{selectedModel.length}} {{texts.selectionOf}} {{settings.selectionLimit}} {{texts.selectionCount}}</a></li></ul></div>'),e.put("app/main/main.template.html",'<div class=container><div class=row><div class="col-xs-12 col-sm-6" style="margin-top: 40px"><div ng-dropdown-multiselect="" is-loading=isLoading on-search=search(term) options=data loader-class="\'fa fa-spinner fa-spin fa-2 fa-fw\'" selected-model=model extra-settings=settings></div></div><div class="col-xs-12 col-sm-6"><pre>{{model|json}}</pre></div></div></div>'),e.put("app/v1docs/v1docs.template.html",'<a ui-sref=main ui-sref-active=active>Main docs</a><h1>Full V1 API Documentation</h1><h2>Attributes</h2><p>List of allowed attributes, you can find more information about them in the usage examples above.</p><table class="table table-condensed"><thead><tr><th>Attribute Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><strong>selected-model</strong></td><td>Object / Array</td><td>The object the will contain the model for the selected items in the dropdown.</td></tr><tr><td><strong>options</strong></td><td>Object / Array</td><td>The options for the dropdown.</td></tr><tr><td><strong>extra-settings</strong></td><td>Object</td><td>The settings for the directive, more information about these settings are available below.</td></tr><tr><td><strong>events</strong></td><td>Object</td><td>Events callbacks, more information below.</td></tr><tr><td><strong>translation-texts</strong></td><td>Object</td><td>Gives the ability to modify the default texts in the directive. More information below.</td></tr><tr><td><strong>group-by</strong></td><td>String</td><td>The name of the property which you like to group by your options. See grouping example.</td></tr><tr><td><strong>checkboxes</strong></td><td>Boolean</td><td>Indicated if to show a normal dropdown with glyphicons or HTML checkboxes.</td></tr><tr><td><strong>search-filter</strong></td><td>String</td><td>Uses for settings the search filter from outside the direcrtive.</td></tr><tr><td><strong>disabled</strong></td><td>Boolean</td><td>Used for disabling the dropdown.</td></tr></tbody></table><h2>Settings</h2><p>Available settings that effects the display or behavior of the directive.<br>These setting are set with the "extra-settings" attribute.</p><table class="table table-condensed"><thead><tr><th>Property Name</th><th>Type</th><th>Default Value</th><th>Description</th></tr></thead><tbody><tr><td>dynamicTitle</td><td>Boolean</td><td>true</td><td>Indicates if the text of the button should change when selecting items from the list.</td></tr><tr><td>closeOnBlur</td><td>Boolean</td><td>true</td><td>Indicates if the dropdown should close when clicking outside of it\'s scope.</td></tr><tr><td>displayProp</td><td>String</td><td>label</td><td>The name of the property that contains the text for the item.</td></tr><tr><td>idProp</td><td>String</td><td>id</td><td>The name of the property that contains the id for the elements.</td></tr><tr><td>externalIdProp</td><td>String</td><td>id</td><td>The name of the property that will use for the selected items model.</td></tr><tr><td>enableSearch</td><td>Boolean</td><td>false</td><td>Indicated if to show the search input or not.</td></tr><tr><td>clearSearchOnClose</td><td>Boolean</td><td>false</td><td>Indicated if to clear the search field when the dropdown has closed.</td></tr><tr><td>searchField</td><td>String</td><td>"$"</td><td>Indicates on which field the search should be done</td></tr><tr><td>selectionLimit</td><td>Number</td><td>0</td><td>The max allowed selected items for the list. For more information see the examples above.</td></tr><tr><td>showCheckAll</td><td>Boolean</td><td>true</td><td>Indicates if to show the "Check All" item.</td></tr><tr><td>showUncheckAll</td><td>Boolean</td><td>true</td><td>Indicates if to show the "Uncheck All" item.</td></tr><tr><td>showEnableSearchButton</td><td>Boolean</td><td>false</td><td>Indicates if to show the "Enable search / Disable search" item.</td></tr><tr><td>closeOnSelect</td><td>Boolean</td><td>false</td><td>Indicates if to close the dropdown after checking an item on the list.</td></tr><tr><td>closeOnDeselect</td><td>Boolean</td><td>false</td><td>Indicates if to close the dropdown after unchecking an item on the list. With selectionLimit = 1 setting this to true does the same as setting closeOnSelect to true.</td></tr><tr><td>buttonClasses</td><td>String</td><td>btn btn-default</td><td>The CSS classes that used for setting the style of the button.</td></tr><tr><td>groupByTextProvider</td><td>Function</td><td>angular.noop</td><td>A callback to a function that provide that name for each group when using group-by attribute. The parameter for the function will be the value of the group-by property.</td></tr><tr><td>scrollable</td><td>Boolean</td><td>false</td><td>Indicates if the dropdown is scrollable, useful if you have a lot of items.</td></tr><tr><td>scrollableHeight</td><td>Number</td><td>300px</td><td>Indicates the height of the drop down if the dropdown is scrollable.</td></tr><tr><td>smartButtonMaxItems</td><td>Number</td><td>0</td><td>Manages the "Smart Button Text" feature, defines the maximum amount of items to on the button.</td></tr><tr><td>smartButtonTextConverter</td><td>Function</td><td>angular.noop</td><td>Related the "Smart Button Text" feature, if a function provided - it will called with two paramters: The item\'s text and the original item, the return value will displayed instead of the item\'s display property. This feature is useful when you want to convert the displayed text into something else.</td></tr><tr><td>styleActive</td><td>Boolean</td><td>false</td><td>Indicates if the list items should get a class active applied when they are selected.</td></tr><tr><td>keyboardControls</td><td>Boolean</td><td>false</td><td>When activated the dropdown can be used with the keyboard instead of with the mouse.</td></tr><tr><td>template</td><td>String</td><td>{ {getPropertyForObject(option, settings.displayProp)} }</td><td>Can be used to modify the appearance of an option in the list, each option is accessible as option.</td></tr><tr><td>selectByGroups</td><td>Array</td><td>undefined</td><td>Values of the groupby property that you want to be selectable as group</td></tr></tbody></table><h2>Events</h2><p>Available event callbacks what the directive fires. These callbacks are set with "events" attribute.</p><table class="table table-condensed"><thead><tr><th>Event Name</th><th>Parameters</th><th>Description</th></tr></thead><tbody><tr><td>onItemSelect</td><td>item</td><td>Fired when selecting an item.</td></tr><tr><td>onItemDeselect</td><td>item</td><td>Fired when unselecting an item.</td></tr><tr><td>onSelectAll</td><td></td><td>Fired when clicking select all.</td></tr><tr><td>onDeselectAll</td><td></td><td>Fired when clicking unselect all.</td></tr><tr><td>onInitDone</td><td></td><td>Fired when the directive done with the "link" phase.</td></tr><tr><td>onMaxSelectionReached</td><td></td><td>Fired when the user reaches the max allowed selected items.</td></tr><tr><td>onSelectionChanged</td><td></td><td>Fired when the selection changes.</td></tr></tbody></table><h2>Translation Texts</h2><p>Available texts that you can override if you wan\'t to make a translation for your website. These are set with the "translation-texts" attribute.</p><table class="table table-condensed"><thead><tr><th>Property Name</th><th>Default Value</th><th>Description</th></tr></thead><tbody><tr><td>checkAll</td><td>Check All</td><td>"Check All" item\'s text.</td></tr><tr><td>uncheckAll</td><td>Uncheck All</td><td>"Uncheck All" item\'s text.</td></tr><tr><td>enableSearch</td><td>Enable search</td><td>"enable search" item\'s text.</td></tr><tr><td>disableSearch</td><td>Disable search</td><td>"disable search" item\'s text.</td></tr><tr><td>selectionCount</td><td>checked</td><td>The suffix for "X/Y" that showed when using selection limit.</td></tr><tr><td>selectionOf</td><td>/</td><td>The value between the selected values and the max values when using selection limit.</td></tr><tr><td>searchPlaceholder</td><td>Search...</td><td>The placeholder for the search input.</td></tr><tr><td>buttonDefaultText</td><td>Select</td><td>The default text that used for the button when no items selected.</td></tr><tr><td>dynamicButtonTextSuffix</td><td>checked</td><td>The suffix for the button that used when using "dynamicText".</td></tr><tr><td>selectGroup</td><td>Select All:</td><td>The prefix of the group selection.</td></tr></tbody></table>')}]);
//# sourceMappingURL=../maps/scripts/app.js.map
